{
	"info": {
		"_postman_id": "45e8bc0c-a022-483f-adf9-58a6a858d8da",
		"name": "allend2-portfolio",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "add boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();",
							"//Set boat_id environment variable from response",
							"pm.environment.set(\"boat_id\", response.id);",
							"",
							"// save request data to validate content",
							"let req = JSON.parse(pm.request.body.raw)",
							"",
							"pm.test(\"2XX status code\", function () {",
							"    //Check for 2XX status code",
							"    pm.expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(response.name).is.equal(req.name);",
							"   pm.expect(response.type).is.equal(req.type);",
							"   pm.expect(response.length).is.equal(req.length);",
							"   pm.expect(response.loads).is.empty;",
							"   //Check if the self url is correct",
							"   pm.expect(response.self).to.equal(`${pm.environment.get(\"app_url\")}/boats/${response.id}`);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"The Going Mary\",\n  \"type\": \"pirate\",\n  \"length\": 500\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat - no jwt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    //Check for 2XX status code",
							"    pm.expect(pm.response.code).to.equal(401);",
							"});",
							"",
							"pm.test(\"Error message\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json().Error).is.equal('Invalid or missing JWT.')",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Acc",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"The Going Mary\",\n  \"type\": \"pirate\",\n  \"length\": 500\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat - bad MIME type",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 Not Acceptable\", function () {",
							"    //Check for 2XX status code",
							"    pm.expect(pm.response.code).to.equal(406);",
							"});",
							"",
							"pm.test(\"Error message\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json().Error).is.equal(\"Your request must accept 'application/json'\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "multipart/encrypted",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"The Going Mary\",\n  \"type\": \"pirate\",\n  \"length\": 500\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat with missing attributes - jwt1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"4XX status code\", function () {",
							"    //Check for 4XX status code",
							"    pm.expect(pm.response.code).to.equal(400);",
							"});",
							"",
							"pm.test(\"4XX error message\", function () {",
							"    //Check for appropriate error message",
							"    pm.expect(pm.response.json()[\"Error\"]).to.equal(\"The request object is missing at least one of the required attributes.\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"comment\": \"Enter proper JSON body for missing boat attributes\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat (new boat, no loads) - jwt1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX status code\", function () {",
							"    //Check for success 2XX response code",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    let res = pm.response.json()",
							"    //Check if the content is valid",
							"    pm.expect(res.name).to.equal(\"The Going Mary\");",
							"    pm.expect(res.type).to.equal(\"pirate\");",
							"    pm.expect(res.length).to.equal(500);",
							"    //Check if the self url is correct",
							"    pm.expect(res.self).to.equal(`${pm.environment.get(\"app_url\")}/boats/${pm.environment.get(\"boat_id\")}`)",
							"    pm.expect(res.loads).to.empty",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat wrong MIME type",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 Not Accepted\", function () {",
							"    //Check for success 2XX response code",
							"    pm.expect(pm.response.code).to.equal(406);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json().Error).to.equal(\"Your request must accept 'application/json'\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/postscript",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat (new boat, no loads) - jwt2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 Forbidden\", function () {",
							"    //Check for success 2XX response code",
							"    pm.expect(pm.response.code).to.equal(403);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json().Error).is.equal('This is not your boat.')",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat with invalid id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"4XX not found\", function () {",
							"    //Check for 4XX response",
							"    pm.expect(pm.response.code).to.equal(404)",
							"});",
							"",
							"",
							"pm.test(\"4XX error message\", function () {",
							"    //Check for error message",
							"    pm.expect(pm.response.json()[\"Error\"]).to.equal(\"No boat with this boat_id exists.\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{invalid_boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{invalid_boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "add load",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();",
							"let req = JSON.parse(pm.request.body.raw);",
							"//Set appropriate environment variable for load id",
							"pm.environment.set(\"load_id\", response.id);",
							"",
							"pm.test(\"2XX status code\", function () {",
							"   //Check if status code is 2XX",
							"   pm.expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check for appropriate content including self value",
							"    pm.expect(response.content).to.equal(req.content);",
							"    pm.expect(response.volume).to.equal(req.volume);",
							"    pm.expect(response.self).is.equal(`${pm.environment.get(\"app_url\")}/loads/${pm.environment.get(\"load_id\")}`);",
							"    pm.expect(response.carrier).is.null;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"volume\": 100,\n  \"content\": \"widgets\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "add load with missing attributes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"4XX status code\", function () {",
							"    //Check for 4XX status code",
							"    pm.expect(pm.response.code).to.equal(400);",
							"});",
							"",
							"pm.test(\"4XX error message\", function () {",
							"    //Check for appropriate error message",
							"    pm.expect(pm.response.json()[\"Error\"]).to.equal(\"The load must have a volume and content attribute.\")",
							"",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"comment\": \"Enter proper JSON body for missing load attributes\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "get load (new load, no carrier)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX status code\", function () {",
							"    //Check if error code is 2XX",
							"    pm.expect(pm.response.code).to.equal(200)",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check if the content is valid and has proper self url",
							"    let response = pm.response.json();",
							"    pm.expect(response.volume).to.equal(100);",
							"    pm.expect(response.content).to.equal(\"widgets\");",
							"    pm.expect(response.carrier).to.null;",
							"    pm.expect(response.self).to.equal(`${pm.environment.get(\"app_url\")}/loads/${pm.environment.get(\"load_id\")}`)",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get load with invalid id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"4XX not found\", function () {",
							"    //Check for 4XX status code",
							"    pm.expect(pm.response.code).to.equal(404);",
							"});",
							"",
							"",
							"pm.test(\"4XX error message\", function () {",
							"    //Check for appropriate error message",
							"    pm.expect(pm.response.json().Error).to.equal(\"No load with this load_id exists.\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{invalid_load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{invalid_load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign load to boat invalid jwt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 Forbidden\", function () {",
							"    //Check for error code 2XX",
							"    pm.expect(pm.response.code).to.equal(403);",
							"});",
							"",
							"pm.test('Not your boat message', ()=>{",
							"    pm.expect(pm.response.json().Error).is.equal('This is not your boat.')",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}",
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign load to boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX status code\", function () {",
							"    //Check for error code 2XX",
							"    pm.expect(pm.response.code).to.equal(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}",
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign load with invalid boat id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"4XX status code\", function () {",
							"   //Check for error code 4XX",
							"   pm.expect(pm.response.code).to.equal(404);",
							"});",
							"",
							"",
							"pm.test(\"4XX error message\", function () {",
							"    //Check for error message",
							"    pm.expect(pm.response.json().Error).to.equal(\"No boat with this boat_id exists.\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{invalid_boat_id}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{invalid_boat_id}}",
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign load with invalid load id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"4XX status code\", function () {",
							"   //Check for error code 4XX",
							"   pm.expect(pm.response.code).to.equal(404);",
							"});",
							"",
							"",
							"pm.test(\"4XX error message\", function () {",
							"    //Check for error message",
							"    pm.expect(pm.response.json().Error).to.equal(\"No load with this load_id exists.\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}/loads/{{invalid_load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}",
						"loads",
						"{{invalid_load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign load with invalid boat id & invalid load id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"4XX status code\", function () {",
							"   //Check for error code 4XX",
							"   pm.expect(pm.response.code).to.equal(404);",
							"});",
							"",
							"",
							"pm.test(\"4XX error message\", function () {",
							"    //Check for error message",
							"    pm.expect(pm.response.json().Error).to.equal(\"No boat or load with these ids exist.\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{invalid_boat_id}}/loads/{{invalid_load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{invalid_boat_id}}",
						"loads",
						"{{invalid_load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "load already assigned",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"4XX status code\", function () {",
							"   //Check for error code 4XX",
							"   pm.expect(pm.response.code).to.equal(403);",
							"});",
							"",
							"",
							"pm.test(\"4XX error message\", function () {",
							"    //Check for error message",
							"    pm.expect(pm.response.json().Error).to.equal(\"Load is already on a boat and cannot be carried by two boats.\")",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}",
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat after load assigned",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();",
							"",
							"pm.test(\"2XX status code\", function () {",
							"    //Check for appropriate 2XX status code",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"pm.test(\"content besides loads is valid\", function () {",
							"    //Check for boat content is valid",
							"    pm.expect(response.name).is.equal(\"The Going Mary\");",
							"    pm.expect(response.type).is.equal(\"pirate\");",
							"    pm.expect(response.length).is.equal(500);",
							"    // check self value",
							"    pm.expect(response.self).is.equal(`${pm.environment.get(\"app_url\")}/boats/${pm.environment.get(\"boat_id\")}`)",
							"});",
							"",
							"pm.test(\"loads content is valid\", function () {",
							"    //Check if load content is valid",
							"    let loadIds = [];",
							"    response.loads.forEach(load=>{",
							"        loadIds.push(load.id);",
							"    });",
							"    // ensure the recently added load is present",
							"    pm.expect(loadIds).is.include(pm.environment.get(\"load_id\"))",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get load after assigned to boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX status code\", function () {",
							"    //Check for appropriate status code 2XX",
							"    pm.expect(pm.response.code).is.equal(200);",
							"});",
							"",
							"let res = pm.response.json();",
							"",
							"pm.test(\"content besides carrier is valid\", function () {",
							"    //Check for appropriate content for load including self attribute",
							"    pm.expect(res.creation_date).is.exist;",
							"    pm.expect(res.content).is.equal(\"widgets\");",
							"    pm.expect(res.volume).is.equal(100);",
							"    pm.expect(res.self).is.equal(`${pm.environment.get(\"app_url\")}/loads/${pm.environment.get(\"load_id\")}`);",
							"});",
							"",
							"pm.test(\"carrier content is valid\", function () {",
							"    //Check for appropriate content for carrier including self attribute",
							"    pm.expect(res.carrier.id).is.equal(pm.environment.get(\"boat_id\"));",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "remove load from boat invalid jwt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX status code\", function () {",
							"    //Check for error code 2XX",
							"    pm.expect(pm.response.code).to.equal(403);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}",
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "remove load from boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX status code\", function () {",
							"    //Check for error code 2XX",
							"    pm.expect(pm.response.code).to.equal(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}",
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get load after removed from boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX status code\", function () {",
							"    //Check for appropriate status code",
							"    pm.expect(pm.response.code).is.equal(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check for appropriate status code including self attribute",
							"    let res = pm.response.json()",
							"    pm.expect(res.creation_date).is.exist;",
							"    pm.expect(res.content).is.equal(\"widgets\");",
							"    pm.expect(res.volume).is.equal(100);",
							"    pm.expect(res.self).is.equal(`${pm.environment.get(\"app_url\")}/loads/${pm.environment.get(\"load_id\")}`);",
							"    pm.expect(res.carrier).is.null;",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat after load removed",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX status code\", function () {",
							"    //Check for appropriate status code 2XX",
							"    pm.expect(pm.response.code).is.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check for appropriate content",
							"    let res = pm.response.json();",
							"    pm.expect(res.name).to.equal(\"The Going Mary\");",
							"    pm.expect(res.type).to.equal(\"pirate\");",
							"    pm.expect(res.length).to.equal(500);    ",
							"    // check self value",
							"    pm.expect(res.self).is.equal(`${pm.environment.get(\"app_url\")}/boats/${pm.environment.get(\"boat_id\")}`)",
							"    // loads array should be empty",
							"    pm.expect(res.loads).is.empty;",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "remove load - load not on this boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"4XX status code\", function () {",
							"    //Check for appropriate 4XX status code",
							"    pm.expect(pm.response.code).is.equal(403);",
							"});",
							"",
							"",
							"pm.test(\"4XX error message\", function () {",
							"    //Check for appropriate error message",
							"    pm.expect(pm.response.json().Error).is.equal(\"This load is not on a boat.\")",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}",
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "remove load with invalid boat id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"4XX status code\", function () {",
							"    //Check for appropriate status 4XX code",
							"    pm.expect(pm.response.code).is.equal(404);",
							"});",
							"",
							"",
							"pm.test(\"4XX error message\", function () {",
							"    //Check for appropriate error message",
							"    pm.expect(pm.response.json().Error).is.equal(\"No boat with this boat_id exists.\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{invalid_boat_id}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{invalid_boat_id}}",
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "remove load with invalid load id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"4XX status code\", function () {",
							"    //Check for appropriate status 4XX code",
							"    pm.expect(pm.response.code).is.equal(404);",
							"});",
							"",
							"",
							"pm.test(\"4XX error message\", function () {",
							"    //Check for appropriate error message",
							"    pm.expect(pm.response.json().Error).is.equal(\"No load with this load_id exists.\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}/loads/{{invalid_load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}",
						"loads",
						"{{invalid_load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "remove load with invalid boat id & invalid load id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"4XX status code\", function () {",
							"    //Check for appropriate status 4XX code",
							"    pm.expect(pm.response.code).is.equal(404);",
							"});",
							"",
							"",
							"pm.test(\"4XX error message\", function () {",
							"    //Check for appropriate error message",
							"    pm.expect(pm.response.json().Error).is.equal(\"No boat or load with these ids exist.\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{invalid_boat_id}}/loads/{{invalid_load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{invalid_boat_id}}",
						"loads",
						"{{invalid_load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "re-assign load to boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX status code\", function () {",
							"    //Check for appropriate 2XX status code",
							"    pm.expect(pm.response.code).is.equal(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}",
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX no content\", function () {",
							"    //Check for appropriate 2XX status code",
							"    pm.expect(pm.response.code).is.equal(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get load after carrier boat deleted",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX status code\", function () {",
							"    //Check for appropriate 2XX status code",
							"    pm.expect(pm.response.code).is.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check for appropriate status code including self attribute",
							"    let res = pm.response.json()",
							"    pm.expect(res.creation_date).is.exist;",
							"    pm.expect(res.content).is.equal(\"widgets\");",
							"    pm.expect(res.volume).is.equal(100);",
							"    pm.expect(res.self).is.equal(`${pm.environment.get(\"app_url\")}/loads/${pm.environment.get(\"load_id\")}`);",
							"    pm.expect(res.carrier).is.null;}",
							");",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat with invalid id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"4XX not found\", function () {",
							"    //Check for appropriate 4XX status code",
							"    pm.expect(pm.response.code).is.equal(404);",
							"});",
							"",
							"",
							"pm.test(\"4XX error message\", function () {",
							"    //Check for appropriate error message",
							"    pm.expect(pm.response.json().Error).is.equal(\"No boat with this boat_id exists.\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{invalid_boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{invalid_boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete load with invalid id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"4XX not found\", function () {",
							"    //Check for appropriate 4XX error message",
							"    pm.expect(pm.response.code).is.equal(404);",
							"});",
							"",
							"",
							"pm.test(\"4XX error message\", function () {",
							"    //Check for appropriate error message",
							"    pm.expect(pm.response.json().Error).is.equal(\"No load with this load_id exists.\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{invalid_load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{invalid_load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "re-add boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();",
							"//Set boat_id environment variable from response",
							"pm.environment.set(\"boat_id\", response.id);",
							"",
							"// save request data to validate content",
							"let req = JSON.parse(pm.request.body.raw)",
							"",
							"pm.test(\"2XX status code\", function () {",
							"    //Check for 2XX status code",
							"    pm.expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(response.name).is.equal(req.name);",
							"   pm.expect(response.type).is.equal(req.type);",
							"   pm.expect(response.length).is.equal(req.length);",
							"   pm.expect(response.loads).is.empty;",
							"   //Check if the self url is correct",
							"   pm.expect(response.self).to.equal(`${pm.environment.get(\"app_url\")}/boats/${response.id}`);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"The Going Mary\",\n  \"type\": \"pirate\",\n  \"length\": 500\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign load to newest boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX status code\", function () {",
							"    //Check for appropriate 2XX error message",
							"    pm.expect(pm.response.code).is.equal(204);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}",
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat after load assigned",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();",
							"",
							"pm.test(\"2XX status code\", function () {",
							"    //Check for appropriate 2XX status code",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"pm.test(\"content besides loads is valid\", function () {",
							"    let res = pm.response.json()",
							"    //Check for boat content is valid",
							"    pm.expect(res.name).is.equal(\"The Going Mary\");",
							"    pm.expect(res.type).is.equal(\"pirate\");",
							"    pm.expect(res.length).is.equal(500);",
							"    // check self value",
							"    pm.expect(res.self).is.equal(`${pm.environment.get(\"app_url\")}/boats/${pm.environment.get(\"boat_id\")}`)",
							"});",
							"",
							"pm.test(\"loads content is valid\", function () {",
							"    //Check if load content is valid",
							"    let loadIds = [];",
							"    response.loads.forEach(load=>{",
							"        loadIds.push(load.id);",
							"        pm.expect(load.self).is.equal(`${pm.environment.get(\"app_url\")}/loads/${load.id}`)",
							"    })",
							"    pm.expect(loadIds).is.include(pm.environment.get(\"load_id\"))",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete load",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX no content\", function () {",
							"   //Check for appropriate 2XX error message",
							"   pm.expect(pm.response.code).to.equal(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get boat after load deleted",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX status code\", function () {",
							"    //Check for appropriate status code 2XX",
							"    pm.expect(pm.response.code).is.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check for appropriate content",
							"    let res = pm.response.json();",
							"    pm.expect(res.name).is.equal(\"The Going Mary\");",
							"    pm.expect(res.type).is.equal(\"pirate\");",
							"    pm.expect(res.length).is.equal(500);",
							"    pm.expect(res.loads).to.empty;",
							"    // check self value",
							"    pm.expect(res.self).is.equal(`${pm.environment.get(\"app_url\")}/boats/${pm.environment.get(\"boat_id\")}`)",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX no content\", function () {",
							"    //Check for appropriate 2XX message",
							"    pm.expect(pm.response.code).to.equal(204)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat01 jwt2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();",
							"//Set boat_id environment variable from response",
							"pm.environment.set(\"boat01_id_jwt2\", response.id);",
							"let req = JSON.parse(pm.request.body.raw)",
							"",
							"pm.test(\"2XX status code\", function () {",
							"    //Check for 2XX status code",
							"    pm.expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(response.name).is.equal(req.name);",
							"   pm.expect(response.type).is.equal(req.type);",
							"   pm.expect(response.length).is.equal(req.length);",
							"   pm.expect(response.loads).is.empty;",
							"   //Check if the self url is correct",
							"   pm.expect(response.self).to.equal(`${pm.environment.get(\"app_url\")}/boats/${response.id}`);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"The Flying Dutchman\",\n  \"type\": \"Ghost\",\n  \"length\": 800\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat02 jwt2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();",
							"//Set boat_id environment variable from response",
							"pm.environment.set(\"boat02_id_jwt2\", response.id);",
							"let req = JSON.parse(pm.request.body.raw)",
							"",
							"pm.test(\"2XX status code\", function () {",
							"    //Check for 2XX status code",
							"    pm.expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(response.name).is.equal(req.name);",
							"   pm.expect(response.type).is.equal(req.type);",
							"   pm.expect(response.length).is.equal(req.length);",
							"   pm.expect(response.loads).is.empty;",
							"   //Check if the self url is correct",
							"   pm.expect(response.self).to.equal(`${pm.environment.get(\"app_url\")}/boats/${response.id}`);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Battleship\",\n  \"type\": \"Navy\",\n  \"length\": 3000\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat03 jwt2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();",
							"//Set boat_id environment variable from response",
							"pm.environment.set(\"boat03_id_jwt2\", response.id);",
							"let req = JSON.parse(pm.request.body.raw)",
							"",
							"pm.test(\"2XX status code\", function () {",
							"    //Check for 2XX status code",
							"    pm.expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(response.name).is.equal(req.name);",
							"   pm.expect(response.type).is.equal(req.type);",
							"   pm.expect(response.length).is.equal(req.length);",
							"   pm.expect(response.loads).is.empty;",
							"   //Check if the self url is correct",
							"   pm.expect(response.self).to.equal(`${pm.environment.get(\"app_url\")}/boats/${response.id}`);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Yellow Submarine\",\n  \"type\": \"Musical\",\n  \"length\": 5000\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat01",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();",
							"//Set boat_id environment variable from response",
							"pm.environment.set(\"boat01_id\", response.id);",
							"let req = JSON.parse(pm.request.body.raw)",
							"",
							"pm.test(\"2XX status code\", function () {",
							"    //Check for 2XX status code",
							"    pm.expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(response.name).is.equal(req.name);",
							"   pm.expect(response.type).is.equal(req.type);",
							"   pm.expect(response.length).is.equal(req.length);",
							"   pm.expect(response.loads).is.empty;",
							"   //Check if the self url is correct",
							"   pm.expect(response.self).to.equal(`${pm.environment.get(\"app_url\")}/boats/${response.id}`);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"The Mini Merry\",\n  \"type\": \"pirate\",\n  \"length\": 50\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add load01",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();",
							"let req = JSON.parse(pm.request.body.raw);",
							"//Set appropriate environment variable for load id and attributes",
							"pm.environment.set(\"load01_id\", response.id);",
							"",
							"pm.test(\"2XX status code\", function () {",
							"   //Check if status code is 2XX",
							"   pm.expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check for appropriate content including self value",
							"    pm.expect(response.content).to.equal(req.content);",
							"    pm.expect(response.volume).to.equal(req.volume);",
							"    pm.expect(response.self).is.equal(`${pm.environment.get(\"app_url\")}/loads/${response.id}`);",
							"    pm.expect(response.carrier).is.null;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"volume\": 20,\n  \"content\": \"the goods\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign load01 to boat01",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX status code\", function () {",
							"    //Check for appropriate 2XX error message",
							"    pm.expect(pm.response.code).is.equal(204);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat01_id}}/loads/{{load01_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat01_id}}",
						"loads",
						"{{load01_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "add load02",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();",
							"let req = JSON.parse(pm.request.body.raw);",
							"//Set appropriate environment variable for load id",
							"pm.environment.set(\"load02_id\", response.id);",
							"",
							"pm.test(\"2XX status code\", function () {",
							"   //Check if status code is 2XX",
							"   pm.expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check for appropriate content including self value",
							"    pm.expect(response.content).to.equal(req.content);",
							"    pm.expect(response.volume).to.equal(req.volume);",
							"    pm.expect(response.self).is.equal(`${pm.environment.get(\"app_url\")}/loads/${response.id}`);",
							"    pm.expect(response.carrier).is.null;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"volume\": 5,\n  \"content\": \"just stuff\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign load02 to boat01",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX status code\", function () {",
							"    //Check for appropriate 2XX error message",
							"    pm.expect(pm.response.code).is.equal(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat01_id}}/loads/{{load02_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat01_id}}",
						"loads",
						"{{load02_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "add load03",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();",
							"let req = JSON.parse(pm.request.body.raw);",
							"//Set appropriate environment variable for load id",
							"pm.environment.set(\"load03_id\", response.id);",
							"",
							"pm.test(\"2XX status code\", function () {",
							"   //Check if status code is 2XX",
							"   pm.expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check for appropriate content including self value",
							"    pm.expect(response.content).to.equal(req.content);",
							"    pm.expect(response.volume).to.equal(req.volume);",
							"    pm.expect(response.self).is.equal(`${pm.environment.get(\"app_url\")}/loads/${response.id}`);",
							"    pm.expect(response.carrier).is.null;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"volume\": 1000000,\n  \"content\": \"all of the things\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign load03 to boat01",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX status code\", function () {",
							"    //Check for appropriate 2XX error message",
							"    pm.expect(pm.response.code).is.equal(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat01_id}}/loads/{{load03_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat01_id}}",
						"loads",
						"{{load03_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "add load04",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();",
							"let req = JSON.parse(pm.request.body.raw);",
							"//Set appropriate environment variable for load id",
							"pm.environment.set(\"load04_id\", response.id);",
							"",
							"pm.test(\"2XX status code\", function () {",
							"   //Check if status code is 2XX",
							"   pm.expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check for appropriate content including self value",
							"    pm.expect(response.content).to.equal(req.content);",
							"    pm.expect(response.volume).to.equal(req.volume);",
							"    pm.expect(response.self).is.equal(`${pm.environment.get(\"app_url\")}/loads/${response.id}`);",
							"    pm.expect(response.carrier).is.null;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"volume\": 1,\n  \"content\": \"the last straw\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign load04 to boat01",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX status code\", function () {",
							"    //Check for appropriate 2XX error message",
							"    pm.expect(pm.response.code).is.equal(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat01_id}}/loads/{{load04_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat01_id}}",
						"loads",
						"{{load04_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "add load05",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();",
							"let req = JSON.parse(pm.request.body.raw);",
							"//Set appropriate environment variable for load id",
							"pm.environment.set(\"load05_id\", response.id);",
							"",
							"pm.test(\"2XX status code\", function () {",
							"   //Check if status code is 2XX",
							"   pm.expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check for appropriate content including self value",
							"    pm.expect(response.content).to.equal(req.content);",
							"    pm.expect(response.volume).to.equal(req.volume);",
							"    pm.expect(response.self).is.equal(`${pm.environment.get(\"app_url\")}/loads/${response.id}`);",
							"    pm.expect(response.carrier).is.null;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"volume\": 10,\n  \"content\": \"More straws\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign load05 to boat01 jwt2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX status code\", function () {",
							"    //Check for appropriate 2XX error message",
							"    pm.expect(pm.response.code).is.equal(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat01_id_jwt2}}/loads/{{load05_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat01_id_jwt2}}",
						"loads",
						"{{load05_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "add load06",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();",
							"let req = JSON.parse(pm.request.body.raw);",
							"//Set appropriate environment variable for load id",
							"pm.environment.set(\"load06_id\", response.id);",
							"",
							"",
							"pm.test(\"2XX status code\", function () {",
							"   //Check if status code is 2XX",
							"   pm.expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check for appropriate content including self value",
							"    pm.expect(response.content).to.equal(req.content);",
							"    pm.expect(response.volume).to.equal(req.volume);",
							"    pm.expect(response.self).is.equal(`${pm.environment.get(\"app_url\")}/loads/${response.id}`);",
							"    pm.expect(response.carrier).is.null;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"volume\": 100,\n  \"content\": \"Equal share\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "assign load06 to boat01 jwt2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX status code\", function () {",
							"    //Check for appropriate 2XX error message",
							"    pm.expect(pm.response.code).is.equal(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat01_id_jwt2}}/loads/{{load06_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat01_id_jwt2}}",
						"loads",
						"{{load06_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all loads with pagination",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX status code\", function () {",
							"   //Check for appropriate 2XX status code",
							"   pm.expect(pm.response.code).is.equal(200);",
							"});",
							"",
							"pm.test(\"only correct number of loads in response\", function () {",
							"    //Check for correct number of loads",
							"    pm.expect(pm.response.json().loads.length).is.equal(5);",
							"    pm.expect(pm.response.json().length).is.equal(5);",
							"});",
							"",
							"pm.test(\"next property exists\", function () {",
							"    //Check if next property exists",
							"    pm.expect(pm.response.json().next).is.exist;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all loads with wrong accept",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 Not Acceptable\", function () {",
							"   //Check for appropriate 2XX status code",
							"   pm.expect(pm.response.code).is.equal(406);",
							"});",
							"",
							"pm.test(\"only correct number of loads in response\", function () {",
							"    //Check for correct number of loads",
							"    pm.expect(pm.response.json().Error).is.equal(\"Your request must accept 'application/json'\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/pdf",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat02",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();",
							"//Set boat_id environment variable from response",
							"pm.environment.set(\"boat02_id\", response.id);",
							"let req = JSON.parse(pm.request.body.raw)",
							"",
							"pm.test(\"2XX status code\", function () {",
							"    //Check for 2XX status code",
							"    pm.expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(response.name).is.equal(req.name);",
							"   pm.expect(response.type).is.equal(req.type);",
							"   pm.expect(response.length).is.equal(req.length);",
							"   pm.expect(response.loads).is.empty;",
							"   //Check if the self url is correct",
							"   pm.expect(response.self).to.equal(`${pm.environment.get(\"app_url\")}/boats/${response.id}`);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"The Noah\",\n  \"type\": \"Ancient\",\n  \"length\": 10000\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat03",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();",
							"//Set boat_id environment variable from response",
							"pm.environment.set(\"boat03_id\", response.id);",
							"let req = JSON.parse(pm.request.body.raw)",
							"",
							"pm.test(\"2XX status code\", function () {",
							"    //Check for 2XX status code",
							"    pm.expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(response.name).is.equal(req.name);",
							"   pm.expect(response.type).is.equal(req.type);",
							"   pm.expect(response.length).is.equal(req.length);",
							"   pm.expect(response.loads).is.empty;",
							"   //Check if the self url is correct",
							"   pm.expect(response.self).to.equal(`${pm.environment.get(\"app_url\")}/boats/${response.id}`);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"The Moby Dick\",\n  \"type\": \"Pirate\",\n  \"length\": 1000\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat04",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();",
							"//Set boat_id environment variable from response",
							"pm.environment.set(\"boat04_id\", response.id);",
							"let req = JSON.parse(pm.request.body.raw)",
							"",
							"pm.test(\"2XX status code\", function () {",
							"    //Check for 2XX status code",
							"    pm.expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(response.name).is.equal(req.name);",
							"   pm.expect(response.type).is.equal(req.type);",
							"   pm.expect(response.length).is.equal(req.length);",
							"   pm.expect(response.loads).is.empty;",
							"   //Check if the self url is correct",
							"   pm.expect(response.self).to.equal(`${pm.environment.get(\"app_url\")}/boats/${response.id}`);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Pluton\",\n  \"type\": \"Ancient\",\n  \"length\": 5000\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all boats - jwt1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX status code\", function () {",
							"   //Check for appropriate 2XX status code",
							"   pm.expect(pm.response.code).is.equal(200);",
							"});",
							"",
							"pm.test(\"only correct number of boats in response\", function () {",
							"    //Check for correct number of loads",
							"    pm.expect(pm.response.json().boats.length).is.equal(4);",
							"    pm.expect(pm.response.json().length).is.equal(4);",
							"});",
							"",
							"pm.test(\"next property exists\", function () {",
							"    //Check if next property exists",
							"    pm.expect(pm.response.json().next).is.not.exist;",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all boats - jwt2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX status code\", function () {",
							"   //Check for appropriate 2XX status code",
							"   pm.expect(pm.response.code).is.equal(200);",
							"});",
							"",
							"pm.test(\"only correct number of boats in response\", function () {",
							"    //Check for correct number of loads",
							"    pm.expect(pm.response.json().boats.length).is.equal(3);",
							"    pm.expect(pm.response.json().length).is.equal(3);",
							"});",
							"",
							"pm.test(\"next property exists\", function () {",
							"    //Check if next property exists",
							"    pm.expect(pm.response.json().next).is.not.exist;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all boats with pagination - no jwt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX status code\", function () {",
							"   //Check for appropriate 2XX status code",
							"   pm.expect(pm.response.code).is.equal(200);",
							"});",
							"",
							"pm.test(\"only correct number of boats in response\", function () {",
							"    //Check for correct number of loads",
							"    pm.expect(pm.response.json().boats).is.empty;",
							"    pm.expect(pm.response.json().length).is.equal(0);",
							"});",
							"",
							"pm.test(\"next property exists\", function () {",
							"    //Check if next property exists",
							"    pm.expect(pm.response.json().next).does.not.exist;",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete load01",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX no content\", function () {",
							"    //Check for appropriate 2XX code",
							"    pm.expect(pm.response.code).is.equal(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load01_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load01_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete load02",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX no content\", function () {",
							"    //Check for appropriate 2XX code",
							"    pm.expect(pm.response.code).is.equal(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load02_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load02_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete load03",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX no content\", function () {",
							"    //Check for appropriate 2XX code",
							"    pm.expect(pm.response.code).is.equal(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load03_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load03_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete load04",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX no content\", function () {",
							"    //Check for appropriate 2XX code",
							"    pm.expect(pm.response.code).is.equal(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load04_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load04_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete load05",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX no content\", function () {",
							"    //Check for appropriate 2XX code",
							"    pm.expect(pm.response.code).is.equal(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load05_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load05_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete load06",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX no content\", function () {",
							"    //Check for appropriate 2XX code",
							"    pm.expect(pm.response.code).is.equal(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load06_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load06_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat01",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX no content\", function () {",
							"    //Check for appropriate 2XX message",
							"    pm.expect(pm.response.code).to.equal(204)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat01_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat01_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat02",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX no content\", function () {",
							"    //Check for appropriate 2XX message",
							"    pm.expect(pm.response.code).to.equal(204)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat02_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat02_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat03",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX no content\", function () {",
							"    //Check for appropriate 2XX message",
							"    pm.expect(pm.response.code).to.equal(204)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat03_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat03_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat04",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX no content\", function () {",
							"    //Check for appropriate 2XX message",
							"    pm.expect(pm.response.code).to.equal(204)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat04_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat04_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat01 jwt2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX no content\", function () {",
							"    //Check for appropriate 2XX message",
							"    pm.expect(pm.response.code).to.equal(204)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat01_id_jwt2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat01_id_jwt2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat02 jwt2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX no content\", function () {",
							"    //Check for appropriate 2XX message",
							"    pm.expect(pm.response.code).to.equal(204)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat02_id_jwt2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat02_id_jwt2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat03 jwt2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX no content\", function () {",
							"    //Check for appropriate 2XX message",
							"    pm.expect(pm.response.code).to.equal(204)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat03_id_jwt2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat03_id_jwt2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 OK\", ()=>{",
							"    pm.expect(pm.response.code).is.equal(200);",
							"    pm.expect(pm.response.json().length).is.exist;",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/users",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat to edit jwt1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();",
							"//Set boat_id environment variable from response",
							"pm.environment.set(\"boat_id\", response.id);",
							"",
							"let req = JSON.parse(pm.request.body.raw)",
							"",
							"pm.test(\"2XX status code\", function () {",
							"    //Check for 2XX status code",
							"    pm.expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(response.name).is.equal(req.name);",
							"   pm.expect(response.type).is.equal(req.type);",
							"   pm.expect(response.length).is.equal(req.length);",
							"   //Check if the self url is correct",
							"   pm.expect(response.self).to.equal(`${pm.environment.get(\"app_url\")}/boats/${response.id}`);",
							"   pm.expect(response.loads).is.empty;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"The Shark Submerge\",\n  \"type\": \"submarine\",\n  \"length\": 20\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit boat jwt1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 OK\", function () {",
							"    //Check for 2XX status code",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    let response = pm.response.json()",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(response.name).is.equal(\"Change the Name and Keep Everything Else\");",
							"   pm.expect(response.type).is.equal(\"submarine\");",
							"   pm.expect(response.length).is.equal(20);",
							"   //Check if the self url is correct",
							"   pm.expect(response.self).to.equal(`${pm.environment.get(\"app_url\")}/boats/${response.id}`);",
							"   pm.expect(response.loads).is.empty;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Change the Name and Keep Everything Else\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit boat jwt1 wrong accept Type",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 Not Acceptable\", function () {",
							"    pm.expect(pm.response.code).to.equal(406);",
							"});",
							"",
							"",
							"pm.test(\"406 Error Message\", function () {",
							"   pm.expect(pm.response.json().Error).is.equal(\"Your request must accept 'application/json'\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/pdf",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Change the Name and Keep Everything Else\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit boat jwt1 invalid boat_id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 Not found\", function () {",
							"    pm.expect(pm.response.code).to.equal(404);",
							"});",
							"",
							"",
							"pm.test(\"Not Found Error Messge\", function () {",
							"   pm.expect(pm.response.json().Error).is.equal(\"No boat with this boat_id exists.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Change the Name and Keep Everything Else\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{invalid_boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{invalid_boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit boat wrong jwt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 Forbidden\", function () {",
							"    //Check for 2XX status code",
							"    pm.expect(pm.response.code).to.equal(403);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   pm.expect(pm.response.json().Error).is.equal(\"This is not your boat.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Change the Name and Keep Everything Else\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "change a boat jwt1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();",
							"//Set boat_id environment variable from response",
							"pm.environment.set(\"boat_id\", response.id);",
							"",
							"let req = JSON.parse(pm.request.body.raw)",
							"",
							"pm.test(\"200 OK\", function () {",
							"    //Check for 2XX status code",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(response.name).is.equal(req.name);",
							"   pm.expect(response.type).is.equal(req.type);",
							"   pm.expect(response.length).is.equal(req.length);",
							"   //Check if the self url is correct",
							"   pm.expect(response.self).to.equal(`${pm.environment.get(\"app_url\")}/boats/${response.id}`);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"New Name\",\n  \"type\": \"New Type\",\n  \"length\": 100000000\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "change a boat jwt1 invalid boat_id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 Not Found\", function () {",
							"    //Check for 2XX status code",
							"    pm.expect(pm.response.code).to.equal(404);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(pm.response.json().Error).is.equal(\"No boat with this boat_id exists.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"New Name\",\n  \"type\": \"New Type\",\n  \"length\": 100000000\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{invalid_boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{invalid_boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "change a boat jwt1 wrong accept type",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 Not Acceptable\", function () {",
							"   //Check for appropriate 2XX status code",
							"   pm.expect(pm.response.code).is.equal(406);",
							"});",
							"",
							"pm.test(\"only correct number of loads in response\", function () {",
							"    //Check for correct number of loads",
							"    pm.expect(pm.response.json().Error).is.equal(\"Your request must accept 'application/json'\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/pdf",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"New Name\",\n  \"type\": \"New Type\",\n  \"length\": 100000000\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "change a boat jwt1 - missing attributes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();",
							"",
							"let req = JSON.parse(pm.request.body.raw)",
							"",
							"pm.test(\"200 OK\", function () {",
							"    //Check for 2XX status code",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"   //Check if the response content is valid and matches the expected values",
							"   pm.expect(response.name).is.equal(req.name);",
							"   pm.expect(response.type).is.equal(\"\");",
							"   pm.expect(response.length).is.equal(null);",
							"   //Check if the self url is correct",
							"   pm.expect(response.self).to.equal(`${pm.environment.get(\"app_url\")}/boats/${response.id}`);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Just the name\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "change a boat invalid jwt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"403 Forbidden\", function () {",
							"    //Check for 2XX status code",
							"    pm.expect(pm.response.code).to.equal(403);",
							"});",
							"",
							"",
							"pm.test(\"403 Error Code\", function () {",
							"   pm.expect(pm.response.json().Error).is.equal(\"This is not your boat.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt2}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"The Shark Submerge\",\n  \"type\": \"submarine\",\n  \"length\": 20\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "add load to edit",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();",
							"let req = JSON.parse(pm.request.body.raw);",
							"//Set appropriate environment variable for load id",
							"pm.environment.set(\"load_id\", response.id);",
							"",
							"pm.test(\"2XX status code\", function () {",
							"   //Check if status code is 2XX",
							"   pm.expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    //Check for appropriate content including self value",
							"    pm.expect(response.content).to.equal(req.content);",
							"    pm.expect(response.volume).to.equal(req.volume);",
							"    pm.expect(response.self).is.equal(`${pm.environment.get(\"app_url\")}/loads/${pm.environment.get(\"load_id\")}`);",
							"    pm.expect(response.carrier).is.null;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"volume\": 100,\n  \"content\": \"widgets\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/loads",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit load",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 OK\", function () {",
							"   //Check if status code is 2XX",
							"   pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    let response = pm.response.json()",
							"    //Check for appropriate content including self value",
							"    pm.expect(response.content).to.equal(\"Just change the contents\");",
							"    pm.expect(response.volume).to.equal(100);",
							"    pm.expect(response.self).is.equal(`${pm.environment.get(\"app_url\")}/loads/${pm.environment.get(\"load_id\")}`);",
							"    pm.expect(response.carrier).is.null;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"content\": \"Just change the contents\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit load invalid load_id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 Not Found\", function () {",
							"   //Check if status code is 2XX",
							"   pm.expect(pm.response.code).to.equal(404);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    let response = pm.response.json()",
							"    pm.expect(response.Error).to.equal(\"No load with this load_id exists.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"content\": \"Just change the contents\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/loads/{{invalid_load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{invalid_load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit load wrong Accept",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 Not Acceptable\", function () {",
							"   //Check if status code is 2XX",
							"   pm.expect(pm.response.code).to.equal(406);",
							"});",
							"",
							"",
							"pm.test(\"406 Error Message\", function () {",
							"    let response = pm.response.json()",
							"    pm.expect(response.Error).to.equal(\"Your request must accept 'application/json'\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/pdf",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"content\": \"Just change the contents\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Change a Load",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 OK\", function () {",
							"   //Check if status code is 2XX",
							"   pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    let response = pm.response.json()",
							"    //Check for appropriate content including self value",
							"    pm.expect(response.content).to.equal(\"New Contents\");",
							"    pm.expect(response.volume).to.equal(9999999);",
							"    pm.expect(response.self).is.equal(`${pm.environment.get(\"app_url\")}/loads/${pm.environment.get(\"load_id\")}`);",
							"    pm.expect(response.carrier).is.null;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"content\": \"New Contents\",\n  \"volume\": 9999999\n}"
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Change a Load missing attributes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"200 OK\", function () {",
							"   //Check if status code is 2XX",
							"   pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    let response = pm.response.json()",
							"    //Check for appropriate content including self value",
							"    pm.expect(response.content).to.equal(\"There should be no volume\");",
							"    pm.expect(response.volume).is.null;",
							"    pm.expect(response.self).is.equal(`${pm.environment.get(\"app_url\")}/loads/${pm.environment.get(\"load_id\")}`);",
							"    pm.expect(response.carrier).is.null;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"content\": \"There should be no volume\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Change a Load invalid load_id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"404 Not Found\", function () {",
							"   //Check if status code is 2XX",
							"   pm.expect(pm.response.code).to.equal(404);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    let response = pm.response.json()",
							"    pm.expect(response.Error).to.equal(\"No load with this load_id exists.\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"content\": \"New Contents\",\n  \"volume\": 9999999\n}"
				},
				"url": {
					"raw": "{{app_url}}/loads/{{invalid_load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{invalid_load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Change a Load missing attributes wrong Accept",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"406 Not Acceptable\", function () {",
							"   //Check if status code is 2XX",
							"   pm.expect(pm.response.code).to.equal(406);",
							"});",
							"",
							"",
							"pm.test(\"406 Error Message\", function () {",
							"    let response = pm.response.json()",
							"    pm.expect(response.Error).to.equal(\"Your request must accept 'application/json'\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/ogg",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"content\": \"There should be no volume\"\n}"
				},
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX no content\", function () {",
							"    //Check for appropriate 2XX message",
							"    pm.expect(pm.response.code).to.equal(204)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt1}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete load",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"2XX no content\", function () {",
							"   //Check for appropriate 2XX error message",
							"   pm.expect(pm.response.code).to.equal(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/loads/{{load_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"loads",
						"{{load_id}}"
					]
				}
			},
			"response": []
		}
	]
}